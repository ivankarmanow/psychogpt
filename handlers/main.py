import datetime
import random
import uuid

from aiogram import Bot, F, Router, flags
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext as FSM
from aiogram.types import CallbackQuery as Call
from aiogram.types import Message as Msg
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession as Session
from sqlalchemy.sql.expression import func

import utils
from models import Answer, Name, StartQuestion, StopWord, User
from states.main import Main

router = Router()


@router.message(Command("restart"))
async def start_dialog(msg: Msg, state: FSM, session: Session, user: User):
    await msg.answer("–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ")
    row = (await session.scalars(select(StartQuestion).order_by(func.random()))).first()
    await msg.answer(row.question)
    gender = '–º—É–∂—á–∏–Ω–∞' if user.gender.lower() == "–º" else "–∂–µ–Ω—â–∏–Ω–∞"
    names = (await session.scalars(select(Name.name))).all()
    await state.update_data(context=[{"role": "system", "content": f"–Ø {user.name}, {gender}, –º–Ω–µ {user.age} –ª–µ—Ç. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ {random.choice(names)}. –ü–æ–º–æ–≥–∞–π —Ä–µ—à–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ —É—Ç–µ—à–∞–π"}, {"role": "assistant", "content": row.question}])
    await state.set_state(Main.gpt)


@flags.chat_action('typing')
@router.message(Main.gpt, F.voice)
async def main_gpt_voice(msg: Msg, state: FSM, session: Session, user: User, bot: Bot):
    if user.pay != "premium" and user.pay != "trial":
        return await msg.answer("–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –≥–æ–ª–æ—Å–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É!")
    if msg.voice:
        file_id = msg.voice.file_id
    elif msg.audio:
        file_id = msg.audio.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    filename = f"{msg.from_user.id}-{uuid.uuid4()}.wav"
    msge = await msg.answer("–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    await bot.download_file(file_path, filename)
    prompt = await utils.transcribe(filename)
    await msge.edit_text(f"<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>üëá\n{prompt}")
    await state.set_state(Main.gpt)
    if user.pay_to:
        if user.pay_to < datetime.datetime.now():
            user.pay = "free"
            await session.merge(user)
            await session.commit()
    if user.pay == "free":
        return await msg.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –û–ø–ª–∞—Ç–∏–µ –¥–æ—Å—Ç—É–ø")
    if user.pay == "standart":
        words = await session.scalars(select(StopWord.word))
        if any(True for word in words if word.lower().strip() in prompt.lower().strip().split()):
            return await msg.answer("–ü—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ, –º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –±–µ—Å–µ–¥—ã –Ω–∞ –¥–∞–Ω–Ω—É—é —Ç–µ–º—É")
    data = await state.get_data()
    gender = '–º—É–∂—á–∏–Ω–∞' if user.gender.lower() == "–º" else "–∂–µ–Ω—â–∏–Ω–∞"
    names = (await session.scalars(select(Name.name))).all()
    context = data.get("context", [{"role": "system", "content": f"–Ø {user.name}, {gender}, –º–Ω–µ {user.age} –ª–µ—Ç. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ {random.choice(names)}. –ü–æ–º–æ–≥–∞–π —Ä–µ—à–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ —É—Ç–µ—à–∞–π"}])
    if context[-1]["role"] == "user":
        return await msg.answer("–í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    context.append({"role": "user", "content": prompt})
    mesg = await msg.answer("‚è≥–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    context = await utils.generate_text(context)
    await state.update_data(context=context)
    answers = (await session.scalars(select(Answer).where(Answer.user_id == msg.from_user.id).order_by(Answer.id))).all()
    if len(answers) > 10:
        for answer in answers[:10-len(answers)]:
            await session.delete(answer)
    session.add(Answer(user_id=msg.from_user.id,
                question=prompt, answer=context[-1]["content"]))
    await session.commit()
    await mesg.edit_text(context[-1]["content"])


@flags.chat_action('typing')
@router.message(Main.gpt, F.text)
async def main_gpt(msg: Msg, state: FSM, session: Session, user: User):
    await state.set_state(Main.gpt)
    if user.pay_to:
        if user.pay_to < datetime.datetime.now():
            user.pay = "free"
            await session.merge(user)
            await session.commit()
    if user.pay == "free":
        return await msg.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –û–ø–ª–∞—Ç–∏–µ –¥–æ—Å—Ç—É–ø")
    prompt = msg.text
    if user.pay == "standart":
        words = await session.scalars(select(StopWord.word))
        if any(True for word in words if word.lower().strip() in prompt.lower().strip().split()):
            return await msg.answer("–ü—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ, –º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –±–µ—Å–µ–¥—ã –Ω–∞ –¥–∞–Ω–Ω—É—é —Ç–µ–º—É")
    data = await state.get_data()
    gender = '–º—É–∂—á–∏–Ω–∞' if user.gender.lower() == "–º" else "–∂–µ–Ω—â–∏–Ω–∞"
    names = (await session.scalars(select(Name.name))).all()
    context = data.get("context", [{"role": "system", "content": f"–Ø {user.name}, {gender}, –º–Ω–µ {user.age} –ª–µ—Ç. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ {random.choice(names)}. –ü–æ–º–æ–≥–∞–π —Ä–µ—à–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ —É—Ç–µ—à–∞–π"}])
    if context[-1]["role"] == "user":
        return await msg.answer("–í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    context.append({"role": "user", "content": prompt})
    mesg = await msg.answer("‚è≥–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    context = await utils.generate_text(context)
    await state.update_data(context=context)
    answers = (await session.scalars(select(Answer).where(Answer.user_id == msg.from_user.id).order_by(Answer.id))).all()
    if len(answers) > 10:
        for answer in answers[:10-len(answers)]:
            await session.delete(answer)
    session.add(Answer(user_id=msg.from_user.id,
                question=prompt, answer=context[-1]["content"]))
    await session.commit()
    await mesg.edit_text(context[-1]["content"])
